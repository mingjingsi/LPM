// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

// bLPM_noX_Rcpp
RcppExport SEXP bLPM_noX_Rcpp(arma::field<arma::vec>& Pvalue, arma::field<arma::mat>& id, arma::mat& alpha, arma::mat& pi1_, arma::mat& pair_id, arma::uword maxiter, double tol, const int coreNum);
RcppExport SEXP _LPM_bLPM_noX_Rcpp(SEXP PvalueSEXP, SEXP idSEXP, SEXP alphaSEXP, SEXP pi1_SEXP, SEXP pair_idSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP coreNumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::vec>& >::type Pvalue(PvalueSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type id(idSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type pi1_(pi1_SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type pair_id(pair_idSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type coreNum(coreNumSEXP);
    rcpp_result_gen = Rcpp::wrap(bLPM_noX_Rcpp(Pvalue, id, alpha, pi1_, pair_id, maxiter, tol, coreNum));
    return rcpp_result_gen;
END_RCPP
}
// bLPM_Rcpp
RcppExport SEXP bLPM_Rcpp(arma::field<arma::vec>& Pvalue, arma::mat& X, arma::field<arma::mat>& id, arma::mat& alpha, arma::mat& pi1_, arma::mat& pair_id, arma::uword maxiter, double tol, const int coreNum);
RcppExport SEXP _LPM_bLPM_Rcpp(SEXP PvalueSEXP, SEXP XSEXP, SEXP idSEXP, SEXP alphaSEXP, SEXP pi1_SEXP, SEXP pair_idSEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP coreNumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::vec>& >::type Pvalue(PvalueSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type id(idSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type pi1_(pi1_SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type pair_id(pair_idSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type coreNum(coreNumSEXP);
    rcpp_result_gen = Rcpp::wrap(bLPM_Rcpp(Pvalue, X, id, alpha, pi1_, pair_id, maxiter, tol, coreNum));
    return rcpp_result_gen;
END_RCPP
}
// single_LPM_noX_Rcpp
RcppExport SEXP single_LPM_noX_Rcpp(arma::vec& Pvalue, double& alpha, double& pi1_, arma::uword maxiter, double tol);
RcppExport SEXP _LPM_single_LPM_noX_Rcpp(SEXP PvalueSEXP, SEXP alphaSEXP, SEXP pi1_SEXP, SEXP maxiterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type Pvalue(PvalueSEXP);
    Rcpp::traits::input_parameter< double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double& >::type pi1_(pi1_SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(single_LPM_noX_Rcpp(Pvalue, alpha, pi1_, maxiter, tol));
    return rcpp_result_gen;
END_RCPP
}
// single_LPM_Rcpp
RcppExport SEXP single_LPM_Rcpp(arma::vec& Pvalue, arma::mat& X, double& alpha, double& pi1_, arma::uword maxiter, double tol);
RcppExport SEXP _LPM_single_LPM_Rcpp(SEXP PvalueSEXP, SEXP XSEXP, SEXP alphaSEXP, SEXP pi1_SEXP, SEXP maxiterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type Pvalue(PvalueSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double& >::type pi1_(pi1_SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(single_LPM_Rcpp(Pvalue, X, alpha, pi1_, maxiter, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LPM_bLPM_noX_Rcpp", (DL_FUNC) &_LPM_bLPM_noX_Rcpp, 8},
    {"_LPM_bLPM_Rcpp", (DL_FUNC) &_LPM_bLPM_Rcpp, 9},
    {"_LPM_single_LPM_noX_Rcpp", (DL_FUNC) &_LPM_single_LPM_noX_Rcpp, 5},
    {"_LPM_single_LPM_Rcpp", (DL_FUNC) &_LPM_single_LPM_Rcpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_LPM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
